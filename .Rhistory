makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set<- function(y) {
x<<-y
m<<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<- matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
x<-makeCacheMatrix(a)
cacheSolve(x)
x
a
makeCacheMatrix()
makeCacheMatrix
args(makeCacheMatrix)
a<- makeVector(c(5,1,3))
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<- matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
x<-makeCacheMatrix(a)
cacheSolve(x)
a
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set<- function(y) {
x<<-y
m<<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
x <- makeCacheMatrix(a)
cacheSolve(x)
solve(x)
x
a<- matrix(1:4,2,2)
cacheSolve(a)
a <- matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
cacheSolve(a)
a<- matrix(1:4,2,2)
x<- makeCacheMatrix(a)
cacheSolve(x)
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set<- function(y) {
x<<-y
m<<- NULL
}
get <- function() x
setinverse<-function(inverse) m<<- inverse
getinverse<-function() m
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(dat, ...)
x$setinverse(m)
m
}
cacheSolve()
a<-matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
x<-makeCacheMatrix(a)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set<- function(y) {
x<<-y
m<<- NULL
}
get <- function() x
setinverse<-function(inverse) m<<- inverse
getinverse<-function() m
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<- matrix(c(9,2,3,4,5,6,7,8,9), ncol = 3)
x<- makeCacheMatrix(a)
cacheSolve(x)
